import os
import requests
import subprocess  # Used for executing commands

# Define constants for the script
CHUNK_SIZE = 1024  # Size of chunks to read/write at a time
XI_API_KEY = "56bbb95057d4bb83109c76a8ba166d05"  # Your API key for authentication
VOICE_ID = "Ha21jUwaMwdgQvqNslSM"  # ID of the voice model to use
INPUT_TEXT_PATH = "elevenlabs/inputs/input.txt"  # Path to the input text file
OUTPUT_FOLDER = "elevenlabs/results"  # Folder to save the output audio file

# Get the current working directory
current_directory = os.getcwd()

# Construct absolute paths for input text file and output folder
input_text_abs_path = os.path.join(current_directory, INPUT_TEXT_PATH)
output_folder_abs_path = os.path.join(current_directory, OUTPUT_FOLDER)

# Ensure that the output folder exists, if not, create it
os.makedirs(output_folder_abs_path, exist_ok=True)

# Read text from input file
with open(input_text_abs_path, "r", encoding="utf-8") as input_file:
    TEXT_TO_SPEAK = input_file.read()

# Generate a unique filename for the output audio file
output_filename = "output.mp3"
output_path = os.path.join(output_folder_abs_path, output_filename)

# Check if the file already exists, if so, append a numerical suffix
counter = 1
while os.path.exists(output_path):
    output_filename = f"output{counter}.mp3"
    output_path = os.path.join(output_folder_abs_path, output_filename)
    counter += 1

# Construct the URL for the Text-to-Speech API request
tts_url = f"https://api.elevenlabs.io/v1/text-to-speech/{VOICE_ID}/stream"

# Set up headers for the API request, including the API key for authentication
headers = {
    "Accept": "application/json",
    "xi-api-key": XI_API_KEY
}

# Set up the data payload for the API request, including the text and voice settings
data = {
    "text": TEXT_TO_SPEAK,
    "model_id": "eleven_multilingual_v2",
    "voice_settings": {
        "stability": 0.5,
        "similarity_boost": 0.8,
        "style": 0.0,
        "use_speaker_boost": True
    }
}

# Make the POST request to the TTS API with headers and data, enabling streaming response
response = requests.post(tts_url, headers=headers, json=data, stream=True)

# Check if the request was successful
if response.ok:
    # Open the output file in write-binary mode
    with open(output_path, "wb") as f:
        # Read the response in chunks and write to the file
        for chunk in response.iter_content(chunk_size=CHUNK_SIZE):
            f.write(chunk)
    # Inform the user of success
    print(f"Audio stream saved successfully as {output_path}.")

    # Play the audio file automatically after creation using mpg123
    subprocess.run(['mpg123', output_path])
else:
    # Print the error message if the request was not successful
    print(response.text)
