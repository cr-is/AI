import os
import requests
import subprocess
import tkinter as tk
from tkinter import ttk

# Define constants for the script
CHUNK_SIZE = 1024  # Size of chunks to read/write at a time
XI_API_KEY = "56bbb95057d4bb83109c76a8ba166d05"  # Your API key for authentication
VOICE_ID = "Ha21jUwaMwdgQvqNslSM"  # ID of the voice model to use
AVAILABLE_VOICES = ["Voice 1", "Voice 2", "Voice 3"]  # List of available voices (to be updated)

# Function to handle button click event
def create_output(output_folder):
    # Read text from input text box
    text_to_speak = text_entry.get("1.0", "end-1c")
    
    # Generate a unique filename for the output audio file
    output_filename = "output.mp3"
    output_path = os.path.join(output_folder, output_filename)
    
    # Check if the file already exists, if so, append a numerical suffix
    counter = 1
    while os.path.exists(output_path):
        output_filename = f"output{counter}.mp3"
        output_path = os.path.join(output_folder, output_filename)
        counter += 1
    
    # Construct the URL for the Text-to-Speech API request
    tts_url = f"https://api.elevenlabs.io/v1/text-to-speech/{VOICE_ID}/stream"
    
    # Set up headers for the API request, including the API key for authentication
    headers = {
        "Accept": "application/json",
        "xi-api-key": XI_API_KEY
    }
    
    # Set up the data payload for the API request, including the text and voice settings
    data = {
        "text": text_to_speak,
        "model_id": "eleven_multilingual_v2",
        "voice_settings": {
            "stability": 0.5,
            "similarity_boost": 0.8,
            "style": 0.0,
            "use_speaker_boost": True
        }
    }
    
    # Make the POST request to the TTS API with headers and data, enabling streaming response
    response = requests.post(tts_url, headers=headers, json=data, stream=True)
    
    # Check if the request was successful
    if response.ok:
        # Open the output file in write-binary mode
        with open(output_path, "wb") as f:
            # Read the response in chunks and write to the file
            for chunk in response.iter_content(chunk_size=CHUNK_SIZE):
                f.write(chunk)
        # Inform the user of success
        output_label.config(text=f"Audio stream saved successfully as {output_path}.")
        
        # Play the audio file automatically after creation using mpg123
        subprocess.run(['mpg123', output_path])
    else:
        # Print the error message if the request was not successful
        output_label.config(text=response.text)

# Create main application window
root = tk.Tk()
root.title("Text to Speech Converter")

# Define output folder
OUTPUT_FOLDER = "elevenlabs/results"

# Create frame for input elements
input_frame = ttk.Frame(root, padding="20")
input_frame.grid(row=0, column=0, padx=20, pady=20)

# Text entry box for input text
text_entry = tk.Text(input_frame, width=50, height=10)
text_entry.grid(row=0, column=0, columnspan=2, padx=5, pady=5)

# Label for voice selection
voice_label = ttk.Label(input_frame, text="Select Voice:")
voice_label.grid(row=1, column=0, padx=5, pady=5, sticky="e")

# Dropdown menu for voice selection
selected_voice = tk.StringVar()
voice_menu = ttk.Combobox(input_frame, textvariable=selected_voice, values=AVAILABLE_VOICES)
voice_menu.grid(row=1, column=1, padx=5, pady=5)
voice_menu.current(0)  # Set default selection

# Button to create output
create_button = ttk.Button(input_frame, text="Create Output", command=lambda: create_output(OUTPUT_FOLDER))
create_button.grid(row=2, column=0, columnspan=2, pady=10)

# Label to display output message
output_label = ttk.Label(input_frame, text="")
output_label.grid(row=3, column=0, columnspan=2)

# Run the application
root.mainloop()
